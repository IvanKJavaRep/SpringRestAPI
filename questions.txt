1. объект User and class Role
2. В классе UserService создадим два пользователя и метод получения пользователя по логину.
3. Controller принимает уже валидных пользователей, но прежде чем предоставить доступ, проверяет их роль
4. Класс JwtRequest - объект, которые пользователь будет отправлять вместе со своим запросом, содержащий
логин и пароль.
5. JwtResponse будет содержать два токена и тип аутентификации. В моем случае Bearer
6. JwtProvider - генерирует токены для конкретного пользователя, на основе двух ключей, которые лежат в 
application.yaml. Но перед этим, класс AuthService проверяет корректность пароля пользователя и лишь 
затем передает его в провайдер.
7. AuthController принимает запросы на создание/обновление токенов.
8. RefreshJwtRequest - объект, который передает пользователь для перевыпуска токена, содержащий refresh token
9. SecurityConfig выдает запросы по токену и пропускает запрос на аутентификацию по пути login. Другие
методы неаутентифицированным пользователям недоступны.
10. JwtFilter проверяет валидность токена, вызывая метод класса JwtProvider и если все ок, то кладет его в 
SecurityContext. объект JwtAuthentication содержит нужные поля и флаг (валидный юзер), чтобы потом спринг могла
брать роли и автоматически их подставлять на проверку в другие методы, запрашивающие определенные параметры.
Например, в моей программе есть различия между ролями юзер и админ.

